<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c)  Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information. -->
<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!--<Import Project="Microsoft.Managed.Core.targets"/>-->

<!--START: BetterLC Task-->
  <PropertyGroup Label="BetterLCVars">
    <!--Change this to the location you put betterLC in.
        I recommend making this part of your solution for CI/CD-->
    <BLCPath>"$(SolutionDir)Build Tools\betterLC.exe"</BLCPath>
    
    <!---Change this to match your SDK folder-->
    <BLCToolPathLC>"C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.7.2 Tools\lc.exe"</BLCToolPathLC>

    <!---Change to .exe/.dll depending on the projects output configuration-->
    <BLCTarget>"$(AssemblyName).dll"</BLCTarget>
    
    <!---Change this to match your licenses folder. Makes sure your .licx name
         is the same as the ASSEMBLY NAME, not the project name.-->
    <BLCLicxFile>"$(SolutionDir)Licenses\$(AssemblyName).licx"</BLCLicxFile>
    
    <BLCOutDir>"$(MSBuildProjectDirectory)\$(BaseIntermediateOutputPath)$(Configuration)\"</BLCOutDir>
    <BLCGenLic>$(BaseIntermediateOutputPath)$(Configuration)\$(AssemblyName).dll.licenses</BLCGenLic>
    <BLCArch>"$(Platform)"</BLCArch>
    <!--<CompiledLicenseFile>$(BLCGenLic)</CompiledLicenseFile>-->
    <!--The following properties are resolve paths for the referenced dlls that use LC for licensing.
        Add as many as you require and add them to the end of the Exec Command property,
        Or use BLCResolvePath1 for all of them and seperate each directory with a comma, NO SPACES-->
    <BLCResolvePath1>"$(SolutionDir)dependencies\C1\Winforms\","$(SolutionDir)dependencies\C1\WPF\"</BLCResolvePath1>
  </PropertyGroup>

  <Target Name="BetterLC" AfterTargets="CompileLicxFiles" BeforeTargets="PrepareResources" Inputs="$(MSBuildAllProjects);@(_LicxFile);@(ReferencePath);@(ReferenceDependencyPaths)" 
          Outputs="$(IntermediateOutputPath)$(TargetFileName).licenses">
    <Message Text="BetterLC ($(ProjectName)): Starting..." Importance="High" />

    <Exec Command="$(BLCPath) $(BLCToolPathLC),$(BLCTarget),$(BLCLicxFile),$(BLCOutDir),$(BLCArch),$(BLCResolvePath1)" 
          StandardErrorImportance="High" 
          StandardOutputImportance="High" 
          WorkingDirectory="$(ProjectDir)" 
          ContinueOnError="false">
     
    </Exec>
  
  </Target>



  <Target Name="BLCOverrideCompiledLicenseProperty" AfterTargets="GenerateAssemblyInfo" BeforeTargets="CoreCompile">
    <CreateProperty Value="$(BLCGenLic)">
      <Output TaskParameter="Value" ItemName="CompiledLicenseFile"/>
    </CreateProperty>
    <CreateProperty Value="$(BLCGenLic)">
      <Output TaskParameter="Value" ItemName="FileWrites"/>
    </CreateProperty>
  </Target>
  
  <!--END: BetterLC Task-->



<!--Copied from %programfiles%\Visual Studio 2019 Preview\MSBuild\Current\Bin\RoslynMicrosoft.CSharp.Core.targets -->

  <!--<Target Name="CoreCompile" 
          Inputs="$(MSBuildAllProjects);
                  @(Compile);
                  @(_CoreCompileResourceInputs);
                  $(ApplicationIcon);
                  $(AssemblyOriginatorKeyFile);
                  @(ReferencePathWithRefAssemblies);
                  @(CompiledLicenseFile);
                  @(LinkResource);
                  @(EmbeddedDocumentation);
                  $(Win32Resource);
                  $(Win32Manifest);
                  @(CustomAdditionalCompileInputs);
                  $(ResolvedCodeAnalysisRuleSet);
                  @(AdditionalFiles);
                  @(EmbeddedFiles);
                  @(EditorConfigFiles)"
          Outputs="@(DocFileItem);
                   @(IntermediateAssembly);
                   @(IntermediateRefAssembly);
                   @(_DebugSymbolsIntermediatePath);
                   $(NonExistentFile);
                   @(CustomAdditionalCompileOutputs)"
          Returns="@(CscCommandLineArgs)"
          DependsOnTargets="$(CoreCompileDependsOn);_BeforeVBCSCoreCompile">
     --><!--These two compiler warnings are raised when a reference is bound to a different version
             than specified in the assembly reference version number.  MSBuild raises the same warning in this case,
             so the compiler warning would be redundant.--><!-- 
    <PropertyGroup Condition="('$(TargetFrameworkVersion)' != 'v1.0') and ('$(TargetFrameworkVersion)' != 'v1.1')">
      <NoWarn>$(NoWarn);1701;1702</NoWarn>
    </PropertyGroup>

    <PropertyGroup>
       --><!--To match historical behavior, when inside VS11+ disable the warning from csc.exe indicating that no sources were passed in--><!--
      <NoWarn Condition="'$(BuildingInsideVisualStudio)' == 'true' AND '$(VisualStudioVersion)' != '' AND '$(VisualStudioVersion)' &gt; '10.0'">$(NoWarn);2008</NoWarn>
    </PropertyGroup>

    <PropertyGroup>
       --><!--If the user has specified AppConfigForCompiler, we'll use it. If they have not, but they set UseAppConfigForCompiler,
                 then we'll use AppConfig--><!-- 
      <AppConfigForCompiler Condition="'$(AppConfigForCompiler)' == '' AND '$(UseAppConfigForCompiler)' == 'true'">$(AppConfig)</AppConfigForCompiler>

       --><!--If we are targeting winmdobj we want to specifically the pdbFile property since we do not want it to collide with the output of winmdexp--><!--
      <PdbFile Condition="'$(PdbFile)' == '' AND '$(OutputType)' == 'winmdobj' AND '$(_DebugSymbolsProduced)' == 'true'">$(IntermediateOutputPath)$(TargetName).compile.pdb</PdbFile>
    </PropertyGroup>


    <Message Text="BetterLC ($(ProjectName)): FUCKEN MAGIC" Importance="High" />
     --><!--Condition is to filter out the _CoreCompileResourceInputs so that it doesn't pass in culture resources to the compiler--><!-- 
    <Csc Condition="'%(_CoreCompileResourceInputs.WithCulture)' != 'true'"
         AdditionalLibPaths="$(AdditionalLibPaths)"
         AddModules="@(AddModules)"
         AdditionalFiles="@(AdditionalFiles)"
         AllowUnsafeBlocks="$(AllowUnsafeBlocks)"
         AnalyzerConfigFiles="@(EditorConfigFiles)"
         Analyzers="@(Analyzer)"
         ApplicationConfiguration="$(AppConfigForCompiler)"
         BaseAddress="$(BaseAddress)"
         CheckForOverflowUnderflow="$(CheckForOverflowUnderflow)"
         ChecksumAlgorithm="$(ChecksumAlgorithm)"
         CodeAnalysisRuleSet="$(ResolvedCodeAnalysisRuleSet)"
         CodePage="$(CodePage)"
         DebugType="$(DebugType)"
         DefineConstants="$(DefineConstants)"
         DelaySign="$(DelaySign)"
         DisabledWarnings="$(NoWarn)"
         DisableSdkPath="$(DisableSdkPath)"
         DocumentationFile="@(DocFileItem)"
         EmbedAllSources="$(EmbedAllSources)"
         EmbeddedFiles="@(EmbeddedFiles)"
         EmitDebugInformation="$(DebugSymbols)"
         EnvironmentVariables="$(CscEnvironment)"
         ErrorEndLocation="$(ErrorEndLocation)"
         ErrorLog="$(ErrorLog)"
         ErrorReport="$(ErrorReport)"
         Features="$(Features)"
         FileAlignment="$(FileAlignment)"
         GenerateFullPaths="$(GenerateFullPaths)"
         HighEntropyVA="$(HighEntropyVA)"
         Instrument="$(Instrument)"
         KeyContainer="$(KeyContainerName)"
         KeyFile="$(KeyOriginatorFile)"
         LangVersion="$(LangVersion)"
         LinkResources="@(LinkResource)"
         MainEntryPoint="$(StartupObject)"
         ModuleAssemblyName="$(ModuleAssemblyName)"
         NoConfig="true"
         NoLogo="$(NoLogo)"
         NoStandardLib="$(NoCompilerStandardLib)"
         NoWin32Manifest="$(NoWin32Manifest)"
         Nullable="$(Nullable)"
         Optimize="$(Optimize)"
         Deterministic="$(Deterministic)"
         PublicSign="$(PublicSign)"
         OutputAssembly="@(IntermediateAssembly)"
         OutputRefAssembly="@(IntermediateRefAssembly)"
         PdbFile="$(PdbFile)"
         Platform="$(PlatformTarget)"
         Prefer32Bit="$(Prefer32Bit)"
         PreferredUILang="$(PreferredUILang)"
         ProvideCommandLineArgs="$(ProvideCommandLineArgs)"
         References="@(ReferencePathWithRefAssemblies)"
         RefOnly="$(ProduceOnlyReferenceAssembly)"
         ReportAnalyzer="$(ReportAnalyzer)"
         Resources="@(_CoreCompileResourceInputs);@(CompiledLicenseFile);@(BLCGenLic)"
         ResponseFiles="$(CompilerResponseFile)"
         RuntimeMetadataVersion="$(RuntimeMetadataVersion)"
         SharedCompilationId="$(SharedCompilationId)"
         SkipCompilerExecution="$(SkipCompilerExecution)"
         Sources="@(Compile)"
         SubsystemVersion="$(SubsystemVersion)"
         TargetType="$(OutputType)"
         ToolExe="$(CscToolExe)"
         ToolPath="$(CscToolPath)"
         TreatWarningsAsErrors="$(TreatWarningsAsErrors)"
         UseHostCompilerIfAvailable="$(UseHostCompilerIfAvailable)"
         UseSharedCompilation="$(UseSharedCompilation)"
         Utf8Output="$(Utf8Output)"
         VsSessionGuid="$(VsSessionGuid)"
         WarningLevel="$(WarningLevel)"
         WarningsAsErrors="$(WarningsAsErrors)"
         WarningsNotAsErrors="$(WarningsNotAsErrors)"
         Win32Icon="$(ApplicationIcon)"
         Win32Manifest="$(Win32Manifest)"
         Win32Resource="$(Win32Resource)"
         PathMap="$(PathMap)"
         SourceLink="$(SourceLink)">
      <Output TaskParameter="CommandLineArgs" ItemName="CscCommandLineArgs" />
    </Csc>

    <ItemGroup>
      <_CoreCompileResourceInputs Remove="@(_CoreCompileResourceInputs)" />
    </ItemGroup>

    <CallTarget Targets="$(TargetsTriggeredByCompilation)" Condition="'$(TargetsTriggeredByCompilation)' != ''" />
  </Target>-->
</Project>